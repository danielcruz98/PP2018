/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Sistema.Sistema;
import Users.Loja;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author daniel
 */
public class janelaLojasMaisVisitadas extends javax.swing.JDialog {

    private final Sistema sistema;
    private final AbstractTableModel modeloTabela;

    /**
     *
     * @param sistema
     */
    public janelaLojasMaisVisitadas(Sistema sistema) {
        initComponents();

        this.sistema = sistema;

        this.modeloTabela = criarModeloTabela();
        tabela.setModel(modeloTabela);

    }

    /**
     *
     *
     */
    private AbstractTableModel criarModeloTabela() {
        String[] nomeColunas = {"Username", "Nome", "ClicksUsados"};
        //Cria uma copia da lista de entradas, para nao alterarmos a lista original
        List<Loja> listas = new ArrayList<>(sistema.getListaLojas().todos());
        //Um Comparator permite-nos comparar dois objectos
        listas.sort(new Comparator<Loja>() {

            @Override
            public int compare(Loja o2, Loja o1) {
                /*
                Este metodo compara dois objectos do mesmo tipo, serve para o metodo sort saber como ordenar a lista
                O retorno deste metodo é:
                    0  -> se consideramos que os objectos sao iguais,
                    -1 -> se consideramos que o primeiro objecto/argumento é menor que o segundo
                    1 -> se consideramos que o segundo objecto/argumento é maior que o primeiro               

                Como queremos ordenar os registos pela data decrescente do acesso, vamos comparar as datas de 
              cada registo de acesso.
                
                Porque a classe LocalDateTime já tem um método que permite comparar dois LocalDateTime (compareTo),
             vamos utilizar esse método, contudo como queremos ordenar os registos de forma descendente vamos
             inverter a ordem dos parametros que passamos 

                 */
                return String.valueOf(o2.getClicksRestantes()).compareTo(String.valueOf(o1.getClicksRestantes()));
            }
        });

        return new AbstractTableModel() {
            @Override
            public String getColumnName(int column) {
                return nomeColunas[column];
            }

            @Override
            public int getRowCount() {
                return listas.size();
            }

            @Override
            public int getColumnCount() {
                return nomeColunas.length;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {

                Loja l = (Loja) listas.get(rowIndex);

                switch (columnIndex) {
                    case 0:
                        return l.getUsername();
                    case 1:
                        return l.getNome();

                    case 2:
                        return l.getClicksUsados();
                    default:
                        return "";
                }
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Nome"
            }
        ));
        jScrollPane1.setViewportView(tabela);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
}
